install.packages("usethis")
usethis::use_test("regex_operator")
test_that("multiplication works", {
expect_equal("ABCD" %=~% "1234", FALSE)
})
library(testthat)
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <-function(lhs, rhs)
{
lhs <- substitute(lhs)
rhs <- substitute(rhs)
stringi::stri_detect(
str = eval(lhs),
regex = eval(rhs))
}
test_that("multiplication works", {
expect_equal("ABCD" %=~% "1234", FALSE)
})
test_that("", {
expect_error(1 %=~% 2)
})
12 %=~% 123
12 %=~% 12
12 %=~% c(12, 3)
help("any")
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <-function(lhs, rhs)
{
lhs <- substitute(lhs)
rhs <- substitute(rhs)
if(any(is.numeric(c(lhs, rhs)))) rlang::abort("One of the arguments are not a String nor a Regex")
stringi::stri_detect(
str = eval(lhs),
regex = eval(rhs))
}
test_that("", {
expect_true(12 %=~% c(12, 3))
})
test_that("", {
expect_error(12 %=~% c(12, 3))
})
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <-function(lhs, rhs)
{
lhs <- substitute(lhs)
rhs <- substitute(rhs)
if(any(is.numeric(c(lhs, rhs)))) rlang::abort("One of the arguments are not a String nor a Regex")
stringi::stri_detect(
str = eval(lhs),
regex = eval(rhs))
}
test_that("", {
expect_error(12 %=~% c(12, 3))
})
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <-function(lhs, rhs)
{
lhs <- substitute(lhs)
rhs <- substitute(rhs)
if(any(is.numeric(c(eval(lhs), eval(rhs))))) rlang::abort("One of the arguments are not a String nor a Regex")
stringi::stri_detect(
str = eval(lhs),
regex = eval(rhs))
}
test_that("", {
expect_error(12 %=~% c(12, 3))
})
12 %=~% c(12, 3)
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <- function(lhs, rhs) {
lhs <- substitute(lhs)
rhs <- substitute(rhs)
if(any(is.numeric(c(eval(lhs), eval(rhs))))) rlang::abort("One of the arguments are not a String nor a Regex")
stringi::stri_detect(
str = eval(lhs),
regex = eval(rhs))
}
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <- function(lhs, rhs) {
lhs <- eval(substitute(lhs))
rhs <- eval(substitute(rhs))
if(any(is.numeric(c(lhs, rhs)))) rlang::abort("One of the arguments are not a String nor a Regex")
stringi::stri_detect(
str = lhs,
regex = rhs)
}
stringi::stri_detect(
str = lhs,
regex = rhs)
#' Regex Match Operator
#'
#'
#'
#'
#' @return Logical
#'
#' @export
#'
`%=~%` <- function(lhs, rhs) {
lhs <- eval(substitute(lhs))
rhs <- eval(substitute(rhs))
if(any(is.numeric(c(lhs, rhs)))) rlang::abort("One of the arguments is not a String nor a Regex")
stringi::stri_detect(
str = lhs,
regex = rhs
)
}
help("substitute")
library(jootools)
library(jootools)
library(jootools)
install.packages("roxygen2")
roxygen2::roxygenise()
rm(list = c("%=~%"))
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(jootools)
library(jootools)
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("remotes")
x <- new.env()
View(x)
x$lold <- 1
View(x)
View(function)
View(`function`)
